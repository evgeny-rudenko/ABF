Структура проекта
```
├── api
│   ├── handlers.go
│   └── server.go
├── cmd
│   ├── cli
│   │   ├── commands.go
│   │   └── main.go
│   └── server
│       └── main.go
├── config
│   └── config.go
├── database
│   ├── bucket.go
│   └── database.go
├── proto
│   └── service.proto
├── services
│   ├── auth.go
│   ├── blacklist.go
│   ├── whitelist.go
│   └── resetbucket.go
├── storage
│   ├── bucketstorage.go
│   ├── whiteliststorage.go
│   └── blackliststorage.go
└── tests
    ├── integration
    │   └── integration_test.go
    └── unit
        └── unit_test.go
```

1. `api`: Этот пакет содержит файлы для обработки API-запросов и запуска сервера.
   - `handlers.go`: Содержит обработчики для методов API.
   - `server.go`: Инициализирует и запускает сервер GRPC или REST API.

2. `cmd`: Эта директория содержит две поддиректории для CLI и сервера.
   - `cli`: Содержит файлы, связанные с командной строкой интерфейса (CLI) для ручного администрирования сервиса.
     - `commands.go`: Определяет команды CLI.
     - `main.go`: Инициализирует и запускает CLI.
   - `server`: Содержит файлы для инициализации и запуска сервера.
     - `main.go`: Запускает основной сервер.

3. `config`: Содержит файл для чтения и хранения конфигурационных параметров.
   - `config.go`: Определяет структуру конфигурации и методы для чтения конфигурационного файла.

4. `database`: Содержит файлы для работы с базой данных.
   - `bucket.go`: Определяет методы для работы с bucket-ами в базе данных.
   - `database.go`: Инициализирует и управляет подключением к базе данных.

5. `proto`: Содержит файлы протокола для GRPC-сервиса (service.proto).

6. `services`: Содержит файлы, связанные с бизнес-логикой сервиса.
   - `auth.go`: Реализует метод для обработки попытки авторизации.
   - `blacklist.go`: Реализует методы для добавления и удаления IP в blacklist.
   - `whitelist.go`: Реализует методы для добавления и удаления IP в whitelist.
   - `resetbucket.go`: Реализует метод для сброса bucket-ов.

7. `storage`: Содержит файлы для хранения данных bucket, whitelist и blacklist.
   - `bucketstorage.go`: Определяет методы для работы с bucket-ами.
   - `whiteliststorage.go`: Определяет методы для работы с whitelist.
   - `blackliststorage.go`: Определяет методы для работы с blacklist.

8. `tests`: Содержит модульные и интеграционные тесты.
   - `unit`: Содержит модульные тесты для отдельных модулей или функций.
   - `integration`: Содержит интеграционные тесты для проверки всех вызовов API.



